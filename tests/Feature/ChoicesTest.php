<?php

namespace Tests\Feature;

use App\Group;
use App\Store;
use App\User;
use App\Vote;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ChoicesTest extends TestCase
{
    use RefreshDatabase;

    protected $member;

    protected $anotherMember;

    protected $outsider;

    protected $group;

    protected $store;

    protected $vote;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->member = factory(User::class)->create();

        $this->anotherMember = factory(User::class)->create();

        $this->outsider = factory(User::class)->create();

        $this->actingAs($this->member);

        $this->group = factory(Group::class)->create();

        $this->group->users()->attach($this->member);

        $this->group->users()->attach($this->anotherMember);

        $this->store = factory(Store::class)->create([
            "group_id" => $this->group->id
        ]);

        $this->vote = factory(Vote::class)->create([
            "store_id" => $this->store->id
        ]);
    }

    /** @test */
    function 그룹원만_투표를_할_수_있다()
    {
        $choice = $this->vote->choices()->create([
            "title" => "hello"
        ]);

        $this->post("/api/choices", ["choice_id" => $choice->id])->assertStatus(201);

        $this->actingAs($this->outsider);

        $this->post("/api/choices", ["choice_id" => $choice->id])->assertStatus(401);
    }

    /** @test */
    function 다중_투표는_할_수_없다()
    {
        $choice = $this->vote->choices()->create([
            "title" => "hello"
        ]);

        $anotherChoice = $this->vote->choices()->create([
            "title" => "123"
        ]);

        $this->post("/api/choices", ["choice_id" => [$choice->id, $anotherChoice->id]])->assertStatus(302);
    }

    /** @test */
    function 기간이_지난_투표지는_수정_또는_참여할_수_없다()
    {
        $this->vote = factory(Vote::class)->create([
            "finished_at" => Carbon::now()->subDay(),
            "store_id" => $this->store->id
        ]);

        $choice = $this->vote->choices()->create([
            "title" => "hello"
        ]);

        $this->post("/api/choices", ["choice_id" => $choice->id])->assertStatus(403);
    }

    /** @test */
    function 투표지의_참여자를_구분할_수_있다()
    {
        $choice = $this->vote->choices()->create([
            "title" => "hello"
        ]);

        $this->post("/api/choices", ["choice_id" => $choice->id])->assertStatus(201);

        $vote = $this->get("/api/votes/".$this->vote->id)->decodeResponseJson();

        $this->assertTrue($vote["choices"]["data"] > 1);
    }
}
