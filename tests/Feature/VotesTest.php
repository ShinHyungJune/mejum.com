<?php

namespace Tests\Feature;

use App\Group;
use App\Store;
use App\User;
use App\Vote;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class VotesTest extends TestCase
{
    use RefreshDatabase;

    protected $member;

    protected $anotherMember;

    protected $outsider;

    protected $group;

    protected $store;

    protected $voteForm;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->member = factory(User::class)->create();

        $this->anotherMember = factory(User::class)->create();

        $this->outsider = factory(User::class)->create();

        $this->actingAs($this->member);

        $this->group = factory(Group::class)->create();

        $this->group->users()->attach($this->member);

        $this->group->users()->attach($this->anotherMember);

        $this->store = factory(Store::class)->create([
            "group_id" => $this->group->id
        ]);

        $this->voteForm = [
            "store_id" => $this->store->id,
            "choices" => ["선택지1", "선택지2"]
        ];
    }

    /** @test */
    function 그룹원만_음식점에_대한_투표지를_만들_수_있다()
    {
        $this->post("/api/votes", $this->voteForm)->assertStatus(201);

        $this->assertCount(1, Vote::get());

        $this->actingAs($this->outsider);

        $this->post("/api/votes", $this->voteForm)->assertStatus(401);
    }

    /** @test */
    /*function 음식점의_메뉴는_투표옵션으로_자동생성된다()
    {
        $menus = [
            [
                "title" => "볶음밥",
                "price" => 1000
            ],
            [
                "title" => "삼겹살",
                "price" => 3000
            ]
        ];

        foreach($menus as $menu){
            $this->store->menus()->create($menu);
        }

        $vote = $this->post("/api/votes", $this->voteForm)->decodeResponseJson("data");

        $hasAllMenu = true;

        foreach($menus as $menu){
            $hasMenu = false;

            foreach($vote["choices"]["data"] as $choice){
                if(strpos($choice["title"], $menu["title"]) !== false)
                    $hasMenu = true;
            }

            if(!$hasMenu) {
                $hasAllMenu = false;
                break;
            }
        }

        $this->assertTrue($hasAllMenu);
    }*/


    function 투표_옵션을_생성할_수_있다()
    {
        $otherChoice = "추가옵션";

        $this->voteForm["choices"] = [$otherChoice];

        $vote = $this->post("/api/votes", $this->voteForm)->decodeResponseJson("data");

        $hasMenu = false;

        foreach($vote["choices"]["data"] as $choice){
            if(strpos($choice["title"], $otherChoice) !== false)
                $hasMenu = true;
        }

        $this->assertTrue($hasMenu);
    }

    /** @test */
    function 그릅원은_자기가_속한_그룹들의_투표지_목록을_볼_수_있다()
    {
        $this->post("/api/votes", $this->voteForm)->assertStatus(201);

        $votes = $this->get("/api/votes")->decodeResponseJson("data");

        $this->assertCount(1, $votes);

        $this->actingAs($this->anotherMember);

        $votes = $this->get("/api/votes")->decodeResponseJson("data");

        $this->assertCount(1, $votes);
    }
}
