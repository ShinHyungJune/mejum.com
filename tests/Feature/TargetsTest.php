<?php

namespace Tests\Feature;

use App\Target;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TargetsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();

        $this->actingAs($this->user);
    }

    /** @test */
    function 수집했던_대상인지_알_수_있다()
    {
        $successPastTarget = factory(Target::class)->create(["success" => true]);

        $failPastTarget = factory(Target::class)->create(["success" => false]);

        $newTarget = factory(Target::class)->create();

        // 이전에 수집 성공했던 대상
        $target = $this->json("GET", "/api/targets/check", ["idx" => $successPastTarget->idx, "platform" => $successPastTarget->platform])->decodeResponseJson();

        $this->assertEquals($target["idx"], $successPastTarget->idx);

        // 이전에 수집 실패했던 대상
        $target = $this->json("GET", "/api/targets/check", ["idx" => $failPastTarget->idx, "platform" => $successPastTarget->platform])->decodeResponseJson("data");

        $this->assertEmpty($target);

        // 새로 수집하는 대상
        $target = $this->json("GET", "/api/targets/check", ["idx" => $newTarget->idx, "platform" => $successPastTarget->platform])->decodeResponseJson("data");

        $this->assertEmpty($target);
    }
}
