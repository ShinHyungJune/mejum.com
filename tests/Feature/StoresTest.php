<?php

namespace Tests\Feature;

use App\Group;
use App\Menu;
use App\Store;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class StoresTest extends TestCase
{
    use RefreshDatabase;

    protected $master;

    protected $member;

    protected $anotherMember;

    protected $outsider;

    protected $group;

    protected $storeForm;

    protected $updateForm;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->master = factory(User::class)->create();

        $this->member = factory(User::class)->create();

        $this->anotherMember = factory(User::class)->create();

        $this->outsider = factory(User::class)->create();

        $this->group = factory(Group::class)->create();

        $this->group->users()->attach($this->master, ["master" => true]);

        $this->group->users()->attach($this->member);

        $this->group->users()->attach($this->anotherMember);

        $this->storeForm = [
            "group_id" => $this->group->id,
            "title" => "test",
            "contact" => "test",
            "address" => "test",
            "address_detail" => "test",
            "park" => false,
            "closed" => ["월", "화"],
            "secret" => true,
        ];

        $this->updateForm = [
            "group_id" => $this->group->id,
            "title" => "짱구를왜말려",
            "contact" => "test",
            "address" => "test",
            "address_detail" => "test",
            "park" => false,
            "closed" => ["월", "화"],
            "secret" => true,
        ];

        $this->actingAs($this->member);
    }

    /** @test */
    public function 그룹에_소속된_사용자는_음식점을_등록할_수_있다()
    {
        $this->post("/api/stores", $this->storeForm)->assertStatus(201);

        $this->assertCount(1, Store::get());
    }

    /** @test */
    public function 그룹에_소속되지_않은_사람은_음식점을_등록할_수_없다()
    {
        $this->actingAs($this->outsider);

        $this->post("/api/stores", $this->storeForm)->assertStatus(404);
    }

    /** @test */
    public function 그룹에_소속된_사용자만_해당_그룹의_음식점_목록을_볼_수_있다()
    {
        $this->post("/api/stores", $this->storeForm)->assertStatus(201);

        $data = $this->get("/api/stores?group_id=" . $this->group->id)->decodeResponseJson("data");

        $this->assertCount(1, $data);


        $this->actingAs($this->outsider);

        $this->get("/api/stores?group_id=" . $this->group->id)->assertStatus(404);
    }

    /** @test */
    public function 그룹원은_음식점을_삭제_및_수정할_수_있다()
    {
        $this->post("/api/stores", $this->storeForm)->assertStatus(201);

        $storeByMember = $this->member->stores()->first();

        $updatedStore = $this->patch("/api/stores/" . $storeByMember->id, $this->updateForm)->decodeResponseJson("data");

        $this->assertEquals($this->updateForm["title"], $updatedStore["title"]);

        $this->delete("/api/stores/" . $storeByMember->id)->assertStatus(200);
    }

    /*public function 다른_사람이_등록한_음식점은_삭제_및_수정할_수_없다()
    {
        $this->post("/api/stores", $this->storeForm)->assertStatus(201);

        $storeByMember = $this->member->stores()->first();

        $this->actingAs($this->anotherMember);

        $this->patch("/api/stores/" . $storeByMember->id, $this->updateForm)->assertStatus(401);

        $this->delete("/api/stores/" . $storeByMember->id)->assertStatus(401);
    }*/

    /*public function 그룹장은_그룹원이_등록한_음식점을_수정_및_삭제할_수_있다()
    {
        $this->post("/api/stores", $this->storeForm)->assertStatus(201);

        $storeByMember = $this->member->stores()->first();

        $this->actingAs($this->master);

        $this->patch("/api/stores/" . $storeByMember->id, $this->updateForm)->assertStatus(200);

        $this->delete("/api/stores/" . $storeByMember->id)->assertStatus(200);
    }*/

    /** @test */
    public function 음식점은_메뉴명_및_음식정명으로_검색할_수_있다()
    {
        $this->post("/api/stores", $this->storeForm);

        $storeTitle = "짱구반점";

        $menuTitle = "참치김밥";

        $this->storeForm["title"] = $storeTitle;


        $this->post("/api/stores", $this->storeForm);

        // 음식점명으로 검색
        $data = $this->json("get", "/api/stores", [
            "group_id" => $this->group->id,
            "word" => $storeTitle
        ])->decodeResponseJson("data");

        $this->assertCount(1, $data);

        factory(Menu::class)->create([
            "store_id" => $data[0]["id"],
            "title" => $menuTitle
        ]);

        // 메뉴명으로 검색
        $data = $this->json("get", "/api/stores", [
            "group_id" => $this->group->id,
            "word" => $menuTitle
        ])->decodeResponseJson("data");

        $this->assertCount(1, $data);
    }

}
